# set -g default-command "/bin/zsh"

# vim-tmux-navigator
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Basic settings -----
set -s escape-time 0
bind-key r source-file ~/.tmux.conf

# Home and End key
# https://stackoverflow.com/questions/18600188/home-end-keys-do-not-work-in-tmux
# bind-key -n Home send Escape "OH"
# bind-key -n End send Escape "OF"

setw -g automatic-rename
set -g mouse on  # enable scrolling

# Keys -----
set -g prefix C-a
setw -g mode-keys vi
setw -g xterm-keys on  # for vim
# setw -g xterm-keys off
setw -g mode-style bg=black

unbind j
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split

bind A command-prompt "rename-window %%"
bind o select-layout "active-only"
# bind M-- select-layout "even-vertical"
# bind M-| select-layout "even-horizontal"
# bind M-r rotate-window

bind-key - split-window -v
bind-key = split-window -h
bind-key v split-window -h
bind-key Space list-panes
bind-key Enter break-pane
bind-key -n M-h prev
bind-key -n M-j next
bind-key -n M-k prev
bind-key -n M-l next
bind-key -n Option-h prev
bind-key -n Option-j next
bind-key -n Option-k prev
bind-key -n Option-l next
setw -g aggressive-resize on
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key -r C-H resize-pane -L
bind-key -r C-J resize-pane -D
bind-key -r C-K resize-pane -U
bind-key -r C-L resize-pane -R


# Theme -----
# loud or quiet?
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none

# set -g default-terminal "xterm-256color"
# set -g terminal-overrides 'xterm*:smcup@:rmcup@'
set -g default-terminal "screen-256color"
set -g status on
set -g status-interval 1
setw -g window-status-style fg=colour244
setw -g window-status-style bg=default
setw -g window-status-current-style fg=colour166
# setw -g window-status-current-style bg=default
# setw -g window-status-current-style bg=yellow
setw -g window-status-current-style bg=blue


# old -----
# set -g status-justify left
# set -g status-style fg=colour136,bg=colour235
# set -g status-left ''
# set -g status-right ''

# vim-tpipeline -----
set -g focus-events on
set -g status-style bg=default
set -g status-left '#(cat #{socket_path}-\#{session_id}-vimbridge)'
set -g status-left-length 90
set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'
set -g status-right-length 90
set -g status-justify centre

# set -g status-bg black
# set -g status-fg cyan
# set -g status-interval 5
# set -g status-left-length 60
# set -g status-left '#[fg=magenta]Â» #[fg=yellow,bold]#(basename ${PWD})#[default]'
# set -g status-left '#[fg=red,bold][#(git branch)] #[fg=cyan]'

# window name
# setw -g window-status-current-format '#[fg=red,bold][#[fg=yellow]#{window_index} #[fg=green]#{pane_current_command} #[fg=yellow]#(echo "#{pane_current_path}" | rev | cut -d'/' -f-1 | rev)#[fg=cyan]*#[fg=red]]'
# setw -g window-status-format '#[fg=red,bold][#{window_index} #[fg=green]#{pane_current_command} #[fg=blue]#(echo "#{pane_current_path}" | rev | cut -d'/' -f-1 | rev) #[fg=red]]'
setw -g window-status-current-format '[#{window_index} #{pane_current_command} #(echo "#{pane_current_path}" | rev | cut -d'/' -f-1 | rev)]'
setw -g window-status-format '[#{window_index} #{pane_current_command} #(echo "#{pane_current_path}" | rev | cut -d'/' -f-1 | rev)]'
set -g set-clipboard on
